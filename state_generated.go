package disgo

// Warning: This file has been automatically generated by generate/state/main.go
// Do NOT make changes here, instead adapt generate/generate.go and run go generate

type state struct {
	users    map[Snowflake]*User
	guilds   map[Snowflake]*Guild
	channels map[Snowflake]*Channel
	messages map[Snowflake]*Message
	roles    map[Snowflake]*Role
}

var objects = &state{
	users:    make(map[Snowflake]*User),
	guilds:   make(map[Snowflake]*Guild),
	channels: make(map[Snowflake]*Channel),
	messages: make(map[Snowflake]*Message),
	roles:    make(map[Snowflake]*Role),
}

func (s *state) registerUser(id identifiableObject) *User {
	if registered, exists := s.users[id.ID()]; exists {
		return registered
	} else {
		user, typeOk := id.(*User)
		if !typeOk {
			user = &User{internal: &internalUser{}}
		}
		s.users[id.ID()] = user
		return user
	}
}

func (s *state) registerGuild(id identifiableObject) *Guild {
	if registered, exists := s.guilds[id.ID()]; exists {
		return registered
	} else {
		guild, typeOk := id.(*Guild)
		if !typeOk {
			guild = &Guild{internal: &internalGuild{}}
		}
		s.guilds[id.ID()] = guild
		return guild
	}
}

func (s *state) registerChannel(id identifiableObject) *Channel {
	if registered, exists := s.channels[id.ID()]; exists {
		return registered
	} else {
		channel, typeOk := id.(*Channel)
		if !typeOk {
			channel = &Channel{internal: &internalChannel{}}
		}
		s.channels[id.ID()] = channel
		return channel
	}
}

func (s *state) registerMessage(id identifiableObject) *Message {
	if registered, exists := s.messages[id.ID()]; exists {
		return registered
	} else {
		message, typeOk := id.(*Message)
		if !typeOk {
			message = &Message{internal: &internalMessage{}}
		}
		s.messages[id.ID()] = message
		return message
	}
}

func (s *state) registerRole(id identifiableObject) *Role {
	if registered, exists := s.roles[id.ID()]; exists {
		return registered
	} else {
		role, typeOk := id.(*Role)
		if !typeOk {
			role = &Role{internal: &internalRole{}}
		}
		s.roles[id.ID()] = role
		return role
	}
}
